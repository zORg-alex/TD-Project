//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/UIInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInput"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""4bc23547-3edf-4889-bc46-bc6ec32df470"",
            ""actions"": [
                {
                    ""name"": ""PrimaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""411dca26-c842-4096-804f-516d39e5a5b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AltClick"",
                    ""type"": ""Button"",
                    ""id"": ""6e46a1ca-f2f0-4b06-a337-5e8d0146e873"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""25be3341-6de8-4304-b015-28eba9e0882e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7fdd0e2b-48af-4259-b69d-1a90c203675c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AltClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98265641-b66e-458f-bb21-95fcfa811b11"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a0161ce-3118-4b5d-8570-ab36325705ce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_PrimaryClick = m_UI.FindAction("PrimaryClick", throwIfNotFound: true);
        m_UI_AltClick = m_UI.FindAction("AltClick", throwIfNotFound: true);
        m_UI_PointerPosition = m_UI.FindAction("PointerPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_PrimaryClick;
    private readonly InputAction m_UI_AltClick;
    private readonly InputAction m_UI_PointerPosition;
    public struct UIActions
    {
        private @UIInput m_Wrapper;
        public UIActions(@UIInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryClick => m_Wrapper.m_UI_PrimaryClick;
        public InputAction @AltClick => m_Wrapper.m_UI_AltClick;
        public InputAction @PointerPosition => m_Wrapper.m_UI_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @PrimaryClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPrimaryClick;
                @PrimaryClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPrimaryClick;
                @PrimaryClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPrimaryClick;
                @AltClick.started -= m_Wrapper.m_UIActionsCallbackInterface.OnAltClick;
                @AltClick.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnAltClick;
                @AltClick.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnAltClick;
                @PointerPosition.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPointerPosition;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryClick.started += instance.OnPrimaryClick;
                @PrimaryClick.performed += instance.OnPrimaryClick;
                @PrimaryClick.canceled += instance.OnPrimaryClick;
                @AltClick.started += instance.OnAltClick;
                @AltClick.performed += instance.OnAltClick;
                @AltClick.canceled += instance.OnAltClick;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IUIActions
    {
        void OnPrimaryClick(InputAction.CallbackContext context);
        void OnAltClick(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
    }
}
